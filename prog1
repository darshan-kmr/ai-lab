from collections import defaultdict

jug1, jug2, aim = 4, 3, 2

visited = defaultdict(lambda: False)

def waterJugSolverDFS(amt1, amt2):
    if (amt1 == aim and amt2 == 0) or (amt2 == aim and amt1 == 0):
        print(amt1, amt2)
        return True

    visited[(amt1, amt2)] = True
    print(amt1, amt2)

    # Try all possible moves
    if not visited[(0, amt2)] and waterJugSolverDFS(0, amt2):
        return True
    if not visited[(amt1, 0)] and waterJugSolverDFS(amt1, 0):
        return True
    if not visited[(jug1, amt2)] and waterJugSolverDFS(jug1, amt2):
        return True
    if not visited[(amt1, jug2)] and waterJugSolverDFS(amt1, jug2):
        return True

    # Pour from jug1 to jug2
    pour_amt = min(amt1, jug2 - amt2)
    if not visited[(amt1 - pour_amt, amt2 + pour_amt)] and waterJugSolverDFS(amt1 - pour_amt, amt2 + pour_amt):
        return True

    # Pour from jug2 to jug1
    pour_amt = min(amt2, jug1 - amt1)
    if not visited[(amt1 + pour_amt, amt2 - pour_amt)] and waterJugSolverDFS(amt1 + pour_amt, amt2 - pour_amt):
        return True

    return False

print("Steps:")
waterJugSolverDFS(0, 0)
